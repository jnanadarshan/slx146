name: Extract Slide Tags

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  # and only if slxv3.html has changed
  push:
    branches:
      - main # Adjust if your default branch is different (e.g., master)
    paths:
      - 'slxv3.html' # Adjust the path if your file is not in the root

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  extract-tags:
    runs-on: ubuntu-latest
    # Grant permissions to write back to the repository
    permissions:
      contents: write

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Sets up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a recent LTS version

      # Creates and runs the Node.js script to extract tags
      - name: Extract tags from HTML
        id: extract
        run: |
          # Use cat with EOF to create the script file easily
          cat << 'EOF' > extract-tags.js
          const fs = require('fs');
          const path = require('path');

          // --- Configuration ---
          const htmlFilePath = path.join(__dirname, 'slxv3.html'); // Path to your HTML file relative to repo root
          const outputFilePath = path.join(__dirname, 'alltags.json'); // Output JSON file path
          // --- End Configuration ---

          console.log(`Reading HTML file: ${htmlFilePath}`);
          console.log(`Output JSON file: ${outputFilePath}`);

          try {
              const htmlContent = fs.readFileSync(htmlFilePath, 'utf8');

              // Regex to find the 'const slideData = [...]' block
              // It captures the array content (including brackets)
              const slideDataRegex = /const\s+slideData\s*=\s*(\[[\s\S]*?\]);/m;
              const match = htmlContent.match(slideDataRegex);

              if (!match || !match[1]) {
                  throw new Error('Could not find slideData array in the HTML file.');
              }

              let slideDataString = match[1];
              console.log('Successfully extracted slideData string.');

              // --- Attempt to parse the extracted string as JSON ---
              // This assumes the content within the brackets is valid JSON.
              // For more complex JS, a proper parser might be needed, but this works for the provided structure.
              let slides = [];
              try {
                 // Using Function constructor for safer evaluation than direct eval
                 const parseFunction = new Function(`return ${slideDataString};`);
                 slides = parseFunction();
                 console.log(`Successfully parsed ${slides.length} slide objects.`);
              } catch (parseError) {
                 console.error('Error parsing slideData string:', parseError);
                 console.error('Extracted string:', slideDataString); // Log the string for debugging
                 throw new Error(`Failed to parse the extracted slideData array. Is it valid JSON/JS? Error: ${parseError.message}`);
              }


              const allTags = new Set();
              slides.forEach((slide, index) => {
                  if (slide && slide.tags && Array.isArray(slide.tags)) {
                      slide.tags.forEach(tag => {
                          if (typeof tag === 'string' && tag.trim() !== '') {
                              allTags.add(tag.trim());
                          } else {
                              console.warn(`Found invalid tag in slide index ${index}:`, tag);
                          }
                      });
                  } else {
                       console.warn(`Slide index ${index} has missing or invalid tags array.`);
                  }
              });

              // Sort tags alphabetically
              const sortedTags = Array.from(allTags).sort((a, b) => a.localeCompare(b));

              // Write the sorted tags to the JSON file
              fs.writeFileSync(outputFilePath, JSON.stringify(sortedTags, null, 2)); // Pretty print JSON
              console.log(`Successfully extracted and saved ${sortedTags.length} unique tags to ${outputFilePath}`);
              console.log(allTags.json);

          } catch (error) {
              console.error('Error during tag extraction process:', error);
              process.exit(1); // Signal failure to the workflow
          }
          EOF

          # Execute the script
          node extract-tags.js

      # Commit and push the generated alltags.json if it changed
      - name: Commit and push alltags.json
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add alltags.json
          # Check if there are changes staged for commit
          git diff --staged --quiet
          if [ $? -ne 0 ]; then
            echo "Changes detected in alltags.json. Committing..."
            git commit -m "Update alltags.json [skip ci]"
            echo "Pushing changes..."
            git push
          else
            echo "No changes detected in alltags.json."
          fi
